{"version":3,"sources":["constants/status.js","components/cards/IconCard.js","components/carousel/GlideComponent.js","containers/dashboard/Statistics.js","views/admin/dashboard.js","containers/dashboard/RecentProjects.js","containers/dashboard/NewComments.js","views/app/dashboard.js"],"names":["statusColor","React","memo","className","icon","title","value","Card","CardBody","IntlMessages","id","resizeTimeOut","mountTimeOut","GlideComponent","props","onResize","bind","renderDots","this","initGlide","destroyGlide","clearTimeout","setTimeout","glideCarousel","update","Glide","carousel","settings","direction","getDirection","mount","on","event","document","createEvent","initEvent","window","dispatchEvent","destroy","total","Children","count","children","dots","i","push","type","key","data-glide-dir","ref","node","data-glide-el","hideNav","Component","defaultProps","Statistics","data","Row","map","item","index","lg","xl","Dashboard","match","useState","someStatistics","setSomeStatistics","useEffect","axios","post","then","res","totalProjectsInProgress","totalPayments","totalProjectsAwaiting","totalProjectsCompleted","xxs","RecentProjects","CardTitle","options","suppressScrollX","wheelPropagation","order","projectCategories","find","o","category","to","_id","src","img","alt","project_name","style","width","Badge","color","status","pill","desc","moment","date","format","NewComments","comments","user_details","avatar","first_name","last_name","height","service_id","message","injectIntl","connect","loginUser","authUser","user","isLoading","setIsLoading","latestProjects","setLatestProjects","messages","setMessages","unmounted","user_id","role","projects","exact","length"],"mappings":"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","file":"static/js/dashboard.be601c80.chunk.js","sourcesContent":["export const statusColor = {\r\n    \"DRAFT\": \"draft\",\r\n    \"WAITING FOR FILES\": \"waiting\",\r\n    \"IN PROGRESS\": \"progress\",\r\n    \"REVIEW\": \"review\",\r\n    \"COMPLETED\": \"completed\",\r\n}","import React from 'react';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\n\r\nconst IconCard = ({ className = 'mb-4', icon, title, value }) => {\r\n  return (\r\n    <div className={`icon-row-item ${className}`}>\r\n      <Card>\r\n        <CardBody className=\"text-center\">\r\n          <i className={icon} />\r\n          <p className=\"card-text font-weight-semibold mb-0\">\r\n            <IntlMessages id={title} />\r\n          </p>\r\n          <p className=\"lead text-center\">{value}</p>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(IconCard);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Glide from '@glidejs/glide';\r\nimport { getDirection } from '../../helpers/Utils';\r\nimport '@glidejs/glide/dist/css/glide.core.min.css';\r\n\r\nlet resizeTimeOut = -1;\r\nlet mountTimeOut = -1;\r\n\r\nclass GlideComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onResize = this.onResize.bind(this);\r\n    this.renderDots = this.renderDots.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initGlide();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.destroyGlide();\r\n    this.initGlide();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.destroyGlide();\r\n  }\r\n\r\n  onResize() {\r\n    clearTimeout(resizeTimeOut);\r\n    resizeTimeOut = setTimeout(() => {\r\n      this.glideCarousel.update();\r\n      resizeTimeOut = -1;\r\n    }, 500);\r\n  }\r\n\r\n  initGlide() {\r\n    this.glideCarousel = new Glide(this.carousel, {\r\n      ...this.props.settings,\r\n      direction: getDirection().direction,\r\n    });\r\n    this.glideCarousel.mount();\r\n    this.glideCarousel.on('resize', this.onResize);\r\n    mountTimeOut = setTimeout(() => {\r\n      const event = document.createEvent('HTMLEvents');\r\n      event.initEvent('resize', false, false);\r\n      window.dispatchEvent(event);\r\n    }, 500);\r\n  }\r\n\r\n  destroyGlide() {\r\n    clearTimeout(resizeTimeOut);\r\n    clearTimeout(mountTimeOut);\r\n    if (this.glideCarousel) {\r\n      this.glideCarousel.destroy();\r\n    }\r\n  }\r\n\r\n  renderDots() {\r\n    const total = React.Children.count(this.props.children);\r\n    const dots = [];\r\n    for (let i = 0; i < total; i++) {\r\n      dots.push(\r\n        <button\r\n          type=\"button\"\r\n          className=\"glide__bullet slider-dot\"\r\n          key={i}\r\n          data-glide-dir={`=${i}`}\r\n        />\r\n      );\r\n    }\r\n    return dots;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"glide\" ref={(node) => (this.carousel = node)}>\r\n          <div data-glide-el=\"track\" className=\"glide__track\">\r\n            <div className=\"glide__slides\">{this.props.children}</div>\r\n          </div>\r\n          {!this.props.settings.hideNav && (\r\n            <div className=\"glide__arrows slider-nav\" data-glide-el=\"controls\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"glide__arrow glide__arrow--left left-arrow btn btn-link\"\r\n                data-glide-dir=\"<\"\r\n              >\r\n                <i className=\"simple-icon-arrow-left\" />\r\n              </button>\r\n\r\n              <div\r\n                className=\"glide__bullets slider-dot-container\"\r\n                data-glide-el=\"controls[nav]\"\r\n              >\r\n                {this.renderDots()}\r\n              </div>\r\n\r\n              <button\r\n                type=\"button\"\r\n                className=\"glide__arrow glide__arrow--right right-arrow btn btn-link\"\r\n                data-glide-dir=\">\"\r\n              >\r\n                <i className=\"simple-icon-arrow-right\" />\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nGlideComponent.defaultProps = {\r\n  settings: {},\r\n};\r\n\r\nGlideComponent.propTypes = {\r\n  settings: PropTypes.shape({\r\n    type: PropTypes.string,\r\n    startAt: PropTypes.number,\r\n    perView: PropTypes.number,\r\n    focusAt: PropTypes.oneOf([PropTypes.number, PropTypes.string]),\r\n    gap: PropTypes.number,\r\n    autoplay: PropTypes.bool,\r\n    hoverpause: PropTypes.bool,\r\n    keyboard: PropTypes.bool,\r\n    bound: PropTypes.bool,\r\n    swipeThreshold: PropTypes.oneOf([PropTypes.number, PropTypes.bool]),\r\n    dragThreshold: PropTypes.oneOf([PropTypes.number, PropTypes.bool]),\r\n    perTouch: PropTypes.oneOf([PropTypes.number, PropTypes.bool]),\r\n    touchRatio: PropTypes.number,\r\n    touchAngle: PropTypes.number,\r\n    animationDuration: PropTypes.number,\r\n    rewind: PropTypes.bool,\r\n    rewindDuration: PropTypes.number,\r\n    animationTimingFunc: PropTypes.string,\r\n    direction: PropTypes.string,\r\n    peek: PropTypes.object,\r\n    breakpoints: PropTypes.object,\r\n    classes: PropTypes.object,\r\n    throttle: PropTypes.number,\r\n  }),\r\n  // id: PropTypes.string,\r\n  // className: PropTypes.string,\r\n};\r\n\r\nexport default GlideComponent;\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport IconCard from '../../components/cards/IconCard';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\nimport GlideComponent from '../../components/carousel/GlideComponent';\r\n\r\nconst Statistics = ({ data }) => {\r\n  return (\r\n    <Row className=\"icon-cards-row\">\r\n      {data.map((item, index) => {\r\n        return (\r\n          <Colxx lg=\"2\" xl=\"2\" className=\"mb-4\" key={`icon_card_${index}`}>\r\n            <IconCard {...item} className=\"mb-4\" />\r\n          </Colxx>\r\n        );\r\n      })}\r\n    </Row>\r\n  );\r\n};\r\nexport default Statistics;\r\n","import React, {useEffect, useState} from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport axios from 'axios';\r\nimport { NavLink } from 'react-router-dom';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { Colxx, Separator } from '../../components/common/CustomBootstrap';\r\nimport Statistics from '../../containers/dashboard/Statistics';\r\n\r\nconst Dashboard = ({ match }) => {\r\n  const [someStatistics, setSomeStatistics] = useState([]);\r\n  useEffect(() => {\r\n    axios.post(`/api/dashboard/admin-statistics`)\r\n    .then((res) => {\r\n      return res.data;\r\n    })\r\n    .then((data) => {\r\n      setSomeStatistics([\r\n        {\r\n          title: 'dashboards.total-projects-in-progress', icon: 'iconsminds-clock', value: data.totalProjectsInProgress\r\n        },\r\n        {\r\n          title: 'dashboards.total-payments', icon: 'iconsminds-clock', value: 'AU$' + data.totalPayments\r\n        },\r\n        {\r\n          title: 'dashboards.total-projects-awaiting', icon: 'iconsminds-clock', value: data.totalProjectsAwaiting\r\n        },\r\n        {\r\n          title: 'dashboards.total-projects-completed', icon: 'iconsminds-clock', value: data.totalProjectsCompleted\r\n        }\r\n      ]);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Colxx xxs=\"12\">  \r\n            <div className=\"mb-2\">\r\n                <h1>\r\n                    <IntlMessages id=\"menu.dashboard\" />\r\n                </h1>\r\n            </div>\r\n            <Separator className=\"mb-5\" />\r\n        </Colxx>\r\n      </Row>\r\n      <Row>\r\n        <Colxx lg=\"12\" xl=\"12\" className=\"mb-4\">\r\n          {\r\n            someStatistics && (\r\n              <Statistics data={someStatistics} />\r\n            )\r\n          }\r\n        </Colxx>\r\n        <Colxx lg=\"8\" xl=\"4\" className=\"mb-4\">\r\n          {/* { messages.length != 0 && (<NewComments comments={messages} />) } */}\r\n        </Colxx>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React from 'react';\r\nimport moment from 'moment';\r\nimport { NavLink } from 'react-router-dom';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { Card, CardBody, CardTitle, Badge } from 'reactstrap';\r\n\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { projectCategories } from '../../constants/projectValues';\r\nimport { statusColor } from '../../constants/status';\r\n\r\nconst RecentProjects = (data) => {\r\n  return (\r\n    <Card>\r\n      <div className=\"position-absolute card-top-buttons\">\r\n        <button type=\"button\" className=\"btn btn-header-light icon-button\">\r\n          <i className=\"simple-icon-refresh\" />\r\n        </button>\r\n      </div>\r\n      <CardBody>\r\n        <CardTitle>\r\n          <IntlMessages id=\"dashboards.recent-projects\" />\r\n        </CardTitle>\r\n        <div className=\"scroll dashboard-list-with-thumbs\">\r\n          <PerfectScrollbar\r\n            options={{ suppressScrollX: true, wheelPropagation: false }}\r\n          >\r\n            {data.data.map((order, index) => {\r\n              let item = projectCategories.find(o => o.value === order.category);\r\n              return (\r\n                <div key={index} className=\"d-flex flex-row mb-3\">\r\n                  <NavLink\r\n                    to={`/app/projects/details/${order._id}`}\r\n                    className=\"d-block position-relative\"\r\n                  >\r\n                    <img\r\n                      src={item.img}\r\n                      alt={order.project_name}\r\n                      className=\"border-0\"\r\n                      style={{width: \"110px\"}}\r\n                    />\r\n                    <Badge\r\n                      color={statusColor[order.status]}\r\n                      key={index}\r\n                      className=\"position-absolute badge-top-right\"\r\n                      pill\r\n                    >\r\n                      {order.status}\r\n                    </Badge>\r\n                  </NavLink>\r\n\r\n                  <div className=\"pl-3 pt-2 pr-2 pb-2\">\r\n                    <NavLink to={`/app/projects/details/${order._id}`}>\r\n                      <p className=\"list-item-heading\">{order.project_name}</p>\r\n                      <div className=\"pr-4\">\r\n                        <p className=\"text-muted mb-1 text-small\">\r\n                          {item.desc}\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"text-primary text-small font-weight-medium d-none d-sm-block\">\r\n                        {moment(order.date).format('LLLL')}\r\n                      </div>\r\n                    </NavLink>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </PerfectScrollbar>\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\nexport default RecentProjects;\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React from 'react';\r\nimport { Card, CardBody, CardTitle } from 'reactstrap';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport moment from 'moment';\r\n\r\nconst NewComments = ({ className = '', comments }) => {\r\n  return (\r\n    <Card className={className}>\r\n      <CardBody>\r\n        <CardTitle>\r\n          <IntlMessages id=\"dashboards.recent-messages\" />\r\n        </CardTitle>\r\n        <div className=\"dashboard-list-with-user\">\r\n          <PerfectScrollbar\r\n            options={{ suppressScrollX: true, wheelPropagation: false }}\r\n          >\r\n            {comments.map((item, index) => {\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className=\"d-flex flex-row mb-3 pb-3 border-bottom\"\r\n                >\r\n                  <NavLink to=\"#\">\r\n                    \r\n                    {\r\n                      item.user_details.avatar != null ? (\r\n                        <img alt={item.user_details.first_name + ' ' + item.user_details.last_name}\r\n                             className=\"img-object-fit border-0 rounded-circle\" width=\"40\" height=\"40\"\r\n                             src={`/${item.user_details.avatar}`} />\r\n                      ): (\r\n                        <img alt={item.user_details.first_name + ' ' + item.user_details.last_name}\r\n                             className=\"img-object-fit border-0 rounded-circle\" width=\"40\" height=\"40\"\r\n                             src='/assets/img/avatar.png' />\r\n                      )\r\n                    }\r\n                  </NavLink>\r\n\r\n                  <div className=\"pl-3 pr-2\">\r\n                    <NavLink to={`/app/projects/view-briefing/${item.service_id}`}>\r\n                      <p className=\"font-weight-medium mb-0\">{item.message}</p>\r\n                      <p className=\"text-muted mb-0 text-small\">\r\n                        {item.user_details.first_name + ' ' + item.user_details.last_name}&nbsp;|&nbsp;\r\n                        {item.project_name} | {moment(item.date).format('LLLL')}\r\n                      </p>\r\n                    </NavLink>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </PerfectScrollbar>\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default NewComments;\r\n","import React, {useEffect, useState} from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { NavLink } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { Colxx, Separator } from '../../components/common/CustomBootstrap';\r\nimport RecentProjects from '../../containers/dashboard/RecentProjects';\r\nimport NewComments from '../../containers/dashboard/NewComments';\r\n\r\nconst Dashboard = ({ match, loginUser }) => {\r\n  \r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [latestProjects, setLatestProjects] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let unmounted = false;\r\n    axios.post(`/api/projects/get-latest`, {user_id: loginUser._id, role: loginUser.role})\r\n    .then((res) => {\r\n      return res.data;\r\n    })\r\n    .then((data) => {\r\n      if (!unmounted) {\r\n        setIsLoading(false);\r\n        setLatestProjects(data.projects);\r\n        setMessages(data.messages);\r\n      }\r\n    });\r\n    return () => { unmounted = true };\r\n  }, []);\r\n  \r\n  return (\r\n    isLoading ? (\r\n        <div className=\"loading\" />\r\n    ): (\r\n    <>\r\n      <Row>\r\n        <Colxx xxs=\"12\">  \r\n            <div className=\"mb-2\">\r\n                <h1>\r\n                  <IntlMessages id=\"menu.welcome\" /> {`${loginUser.first_name}`}\r\n                </h1>\r\n\r\n                <div className=\"text-zero top-right-button-container\">\r\n                    <NavLink\r\n                        exact={true}\r\n                        to=\"/app/projects/new-project\"\r\n                        className=\"top-right-button btn btn-primary btn-lg\"\r\n                    >\r\n                    <IntlMessages id=\"projects.add-new\" />\r\n                    </NavLink>\r\n                </div>\r\n            </div>\r\n            <Separator className=\"mb-5\" />\r\n        </Colxx>\r\n      </Row>\r\n      <Row>\r\n        <Colxx lg=\"8\" xl=\"4\" className=\"mb-4\">\r\n          { latestProjects.length != 0 && (<RecentProjects data={latestProjects} />) }\r\n        </Colxx>\r\n        <Colxx lg=\"8\" xl=\"4\" className=\"mb-4\">\r\n          { messages.length != 0 && (<NewComments comments={messages} />) }\r\n        </Colxx>\r\n      </Row>\r\n    </>\r\n  ));\r\n};\r\n\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const loginUser = authUser.user;\r\n  return {\r\n    loginUser\r\n  };\r\n};\r\nexport default injectIntl(\r\n  connect(mapStateToProps, {})(Dashboard)\r\n);\r\n"],"sourceRoot":""}