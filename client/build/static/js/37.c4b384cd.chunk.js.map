{"version":3,"sources":["../node_modules/reactstrap/es/NavLink.js","../node_modules/reactstrap/es/Table.js","../node_modules/mousetrap/mousetrap.js"],"names":["propTypes","tag","tagPropType","innerRef","PropTypes","oneOfType","object","func","string","disabled","bool","active","className","cssModule","onClick","href","any","NavLink","_React$Component","props","_this","call","this","bind","_assertThisInitialized","_inheritsLoose","_proto","prototype","e","preventDefault","render","_this$props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","ref","Component","defaultProps","size","bordered","borderless","striped","dark","hover","responsive","responsiveTag","Table","ResponsiveTag","table","responsiveClassName","window","document","undefined","_REVERSE_MAP","_MAP","8","9","13","16","17","18","20","27","32","33","34","35","36","37","38","39","40","45","46","91","93","224","_KEYCODE_MAP","106","107","109","110","111","186","187","188","189","190","191","192","219","220","221","222","_SHIFT_MAP","_SPECIAL_ALIASES","test","navigator","platform","i","toString","Mousetrap","keys","callback","action","Array","_bindMultiple","unbind","trigger","_directMap","reset","_callbacks","stopCallback","element","indexOf","_belongsTo","ancestor","parentNode","target","composedPath","initialEventTarget","tagName","isContentEditable","handleKey","self","_handleKey","apply","arguments","addKeycodes","key","hasOwnProperty","init","documentMousetrap","method","charAt","module","exports","define","_addEvent","type","addEventListener","attachEvent","_characterFromEvent","character","String","fromCharCode","which","shiftKey","toLowerCase","_isModifier","_pickBestAction","modifiers","_getReverseMap","length","_getKeyInfo","combination","replace","split","_keysFromString","push","targetElement","_resetTimer","_sequenceLevels","_ignoreNextKeyup","_ignoreNextKeypress","_nextExpectedAction","_resetSequences","doNotReset","activeSequences","_getMatches","sequenceName","level","modifiers1","modifiers2","matches","seq","metaKey","ctrlKey","sort","join","deleteCombo","combo","deleteSequence","splice","_fireCallback","sequence","srcElement","returnValue","_preventDefault","stopPropagation","cancelBubble","_stopPropagation","_handleKeyEvent","keyCode","altKey","_eventModifiers","_bindSequence","_increaseSequence","nextAction","clearTimeout","setTimeout","_callbackAndReset","wrappedCallback","_bindSingle","info","callbacks","maxLevel","processedSequenceCallback","Math","max","ignoreThisKeypress","combinations"],"mappings":"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","file":"static/js/37.c4b384cd.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  disabled: PropTypes.bool,\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  onClick: PropTypes.func,\n  href: PropTypes.any\n};\nvar defaultProps = {\n  tag: 'a'\n};\n\nvar NavLink =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(NavLink, _React$Component);\n\n  function NavLink(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = NavLink.prototype;\n\n  _proto.onClick = function onClick(e) {\n    if (this.props.disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (this.props.href === '#') {\n      e.preventDefault();\n    }\n\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        active = _this$props.active,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"active\", \"tag\", \"innerRef\"]);\n\n    var classes = mapToCssModules(classNames(className, 'nav-link', {\n      disabled: attributes.disabled,\n      active: active\n    }), cssModule);\n    return React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      onClick: this.onClick,\n      className: classes\n    }));\n  };\n\n  return NavLink;\n}(React.Component);\n\nNavLink.propTypes = propTypes;\nNavLink.defaultProps = defaultProps;\nexport default NavLink;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  size: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  striped: PropTypes.bool,\n  dark: PropTypes.bool,\n  hover: PropTypes.bool,\n  responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  tag: tagPropType,\n  responsiveTag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n};\nvar defaultProps = {\n  tag: 'table',\n  responsiveTag: 'div'\n};\n\nvar Table = function Table(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      size = props.size,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      striped = props.striped,\n      dark = props.dark,\n      hover = props.hover,\n      responsive = props.responsive,\n      Tag = props.tag,\n      ResponsiveTag = props.responsiveTag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"size\", \"bordered\", \"borderless\", \"striped\", \"dark\", \"hover\", \"responsive\", \"tag\", \"responsiveTag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'table', size ? 'table-' + size : false, bordered ? 'table-bordered' : false, borderless ? 'table-borderless' : false, striped ? 'table-striped' : false, dark ? 'table-dark' : false, hover ? 'table-hover' : false), cssModule);\n  var table = React.createElement(Tag, _extends({}, attributes, {\n    ref: innerRef,\n    className: classes\n  }));\n\n  if (responsive) {\n    var responsiveClassName = mapToCssModules(responsive === true ? 'table-responsive' : \"table-responsive-\" + responsive, cssModule);\n    return React.createElement(ResponsiveTag, {\n      className: responsiveClassName\n    }, table);\n  }\n\n  return table;\n};\n\nTable.propTypes = propTypes;\nTable.defaultProps = defaultProps;\nexport default Table;","/*global define:false */\n/**\n * Copyright 2012-2017 Craig Campbell\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Mousetrap is a simple keyboard shortcut library for Javascript with\n * no external dependencies\n *\n * @version 1.6.5\n * @url craig.is/killing/mice\n */\n(function(window, document, undefined) {\n\n    // Check if mousetrap is used inside browser, if not, return\n    if (!window) {\n        return;\n    }\n\n    /**\n     * mapping of special keycodes to their corresponding keys\n     *\n     * everything in this dictionary cannot use keypress events\n     * so it has to be here to map to the correct keycodes for\n     * keyup/keydown events\n     *\n     * @type {Object}\n     */\n    var _MAP = {\n        8: 'backspace',\n        9: 'tab',\n        13: 'enter',\n        16: 'shift',\n        17: 'ctrl',\n        18: 'alt',\n        20: 'capslock',\n        27: 'esc',\n        32: 'space',\n        33: 'pageup',\n        34: 'pagedown',\n        35: 'end',\n        36: 'home',\n        37: 'left',\n        38: 'up',\n        39: 'right',\n        40: 'down',\n        45: 'ins',\n        46: 'del',\n        91: 'meta',\n        93: 'meta',\n        224: 'meta'\n    };\n\n    /**\n     * mapping for special characters so they can support\n     *\n     * this dictionary is only used incase you want to bind a\n     * keyup or keydown event to one of these keys\n     *\n     * @type {Object}\n     */\n    var _KEYCODE_MAP = {\n        106: '*',\n        107: '+',\n        109: '-',\n        110: '.',\n        111 : '/',\n        186: ';',\n        187: '=',\n        188: ',',\n        189: '-',\n        190: '.',\n        191: '/',\n        192: '`',\n        219: '[',\n        220: '\\\\',\n        221: ']',\n        222: '\\''\n    };\n\n    /**\n     * this is a mapping of keys that require shift on a US keypad\n     * back to the non shift equivelents\n     *\n     * this is so you can use keyup events with these keys\n     *\n     * note that this will only work reliably on US keyboards\n     *\n     * @type {Object}\n     */\n    var _SHIFT_MAP = {\n        '~': '`',\n        '!': '1',\n        '@': '2',\n        '#': '3',\n        '$': '4',\n        '%': '5',\n        '^': '6',\n        '&': '7',\n        '*': '8',\n        '(': '9',\n        ')': '0',\n        '_': '-',\n        '+': '=',\n        ':': ';',\n        '\\\"': '\\'',\n        '<': ',',\n        '>': '.',\n        '?': '/',\n        '|': '\\\\'\n    };\n\n    /**\n     * this is a list of special strings you can use to map\n     * to modifier keys when you specify your keyboard shortcuts\n     *\n     * @type {Object}\n     */\n    var _SPECIAL_ALIASES = {\n        'option': 'alt',\n        'command': 'meta',\n        'return': 'enter',\n        'escape': 'esc',\n        'plus': '+',\n        'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'\n    };\n\n    /**\n     * variable to store the flipped version of _MAP from above\n     * needed to check if we should use keypress or not when no action\n     * is specified\n     *\n     * @type {Object|undefined}\n     */\n    var _REVERSE_MAP;\n\n    /**\n     * loop through the f keys, f1 to f19 and add them to the map\n     * programatically\n     */\n    for (var i = 1; i < 20; ++i) {\n        _MAP[111 + i] = 'f' + i;\n    }\n\n    /**\n     * loop through to map numbers on the numeric keypad\n     */\n    for (i = 0; i <= 9; ++i) {\n\n        // This needs to use a string cause otherwise since 0 is falsey\n        // mousetrap will never fire for numpad 0 pressed as part of a keydown\n        // event.\n        //\n        // @see https://github.com/ccampbell/mousetrap/pull/258\n        _MAP[i + 96] = i.toString();\n    }\n\n    /**\n     * cross browser add event method\n     *\n     * @param {Element|HTMLDocument} object\n     * @param {string} type\n     * @param {Function} callback\n     * @returns void\n     */\n    function _addEvent(object, type, callback) {\n        if (object.addEventListener) {\n            object.addEventListener(type, callback, false);\n            return;\n        }\n\n        object.attachEvent('on' + type, callback);\n    }\n\n    /**\n     * takes the event and returns the key character\n     *\n     * @param {Event} e\n     * @return {string}\n     */\n    function _characterFromEvent(e) {\n\n        // for keypress events we should return the character as is\n        if (e.type == 'keypress') {\n            var character = String.fromCharCode(e.which);\n\n            // if the shift key is not pressed then it is safe to assume\n            // that we want the character to be lowercase.  this means if\n            // you accidentally have caps lock on then your key bindings\n            // will continue to work\n            //\n            // the only side effect that might not be desired is if you\n            // bind something like 'A' cause you want to trigger an\n            // event when capital A is pressed caps lock will no longer\n            // trigger the event.  shift+a will though.\n            if (!e.shiftKey) {\n                character = character.toLowerCase();\n            }\n\n            return character;\n        }\n\n        // for non keypress events the special maps are needed\n        if (_MAP[e.which]) {\n            return _MAP[e.which];\n        }\n\n        if (_KEYCODE_MAP[e.which]) {\n            return _KEYCODE_MAP[e.which];\n        }\n\n        // if it is not in the special map\n\n        // with keydown and keyup events the character seems to always\n        // come in as an uppercase character whether you are pressing shift\n        // or not.  we should make sure it is always lowercase for comparisons\n        return String.fromCharCode(e.which).toLowerCase();\n    }\n\n    /**\n     * checks if two arrays are equal\n     *\n     * @param {Array} modifiers1\n     * @param {Array} modifiers2\n     * @returns {boolean}\n     */\n    function _modifiersMatch(modifiers1, modifiers2) {\n        return modifiers1.sort().join(',') === modifiers2.sort().join(',');\n    }\n\n    /**\n     * takes a key event and figures out what the modifiers are\n     *\n     * @param {Event} e\n     * @returns {Array}\n     */\n    function _eventModifiers(e) {\n        var modifiers = [];\n\n        if (e.shiftKey) {\n            modifiers.push('shift');\n        }\n\n        if (e.altKey) {\n            modifiers.push('alt');\n        }\n\n        if (e.ctrlKey) {\n            modifiers.push('ctrl');\n        }\n\n        if (e.metaKey) {\n            modifiers.push('meta');\n        }\n\n        return modifiers;\n    }\n\n    /**\n     * prevents default for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _preventDefault(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n            return;\n        }\n\n        e.returnValue = false;\n    }\n\n    /**\n     * stops propogation for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _stopPropagation(e) {\n        if (e.stopPropagation) {\n            e.stopPropagation();\n            return;\n        }\n\n        e.cancelBubble = true;\n    }\n\n    /**\n     * determines if the keycode specified is a modifier key or not\n     *\n     * @param {string} key\n     * @returns {boolean}\n     */\n    function _isModifier(key) {\n        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';\n    }\n\n    /**\n     * reverses the map lookup so that we can look for specific keys\n     * to see what can and can't use keypress\n     *\n     * @return {Object}\n     */\n    function _getReverseMap() {\n        if (!_REVERSE_MAP) {\n            _REVERSE_MAP = {};\n            for (var key in _MAP) {\n\n                // pull out the numeric keypad from here cause keypress should\n                // be able to detect the keys from the character\n                if (key > 95 && key < 112) {\n                    continue;\n                }\n\n                if (_MAP.hasOwnProperty(key)) {\n                    _REVERSE_MAP[_MAP[key]] = key;\n                }\n            }\n        }\n        return _REVERSE_MAP;\n    }\n\n    /**\n     * picks the best action based on the key combination\n     *\n     * @param {string} key - character for key\n     * @param {Array} modifiers\n     * @param {string=} action passed in\n     */\n    function _pickBestAction(key, modifiers, action) {\n\n        // if no action was picked in we should try to pick the one\n        // that we think would work best for this key\n        if (!action) {\n            action = _getReverseMap()[key] ? 'keydown' : 'keypress';\n        }\n\n        // modifier keys don't work as expected with keypress,\n        // switch to keydown\n        if (action == 'keypress' && modifiers.length) {\n            action = 'keydown';\n        }\n\n        return action;\n    }\n\n    /**\n     * Converts from a string key combination to an array\n     *\n     * @param  {string} combination like \"command+shift+l\"\n     * @return {Array}\n     */\n    function _keysFromString(combination) {\n        if (combination === '+') {\n            return ['+'];\n        }\n\n        combination = combination.replace(/\\+{2}/g, '+plus');\n        return combination.split('+');\n    }\n\n    /**\n     * Gets info for a specific key combination\n     *\n     * @param  {string} combination key combination (\"command+s\" or \"a\" or \"*\")\n     * @param  {string=} action\n     * @returns {Object}\n     */\n    function _getKeyInfo(combination, action) {\n        var keys;\n        var key;\n        var i;\n        var modifiers = [];\n\n        // take the keys from this pattern and figure out what the actual\n        // pattern is all about\n        keys = _keysFromString(combination);\n\n        for (i = 0; i < keys.length; ++i) {\n            key = keys[i];\n\n            // normalize key names\n            if (_SPECIAL_ALIASES[key]) {\n                key = _SPECIAL_ALIASES[key];\n            }\n\n            // if this is not a keypress event then we should\n            // be smart about using shift keys\n            // this will only work for US keyboards however\n            if (action && action != 'keypress' && _SHIFT_MAP[key]) {\n                key = _SHIFT_MAP[key];\n                modifiers.push('shift');\n            }\n\n            // if this key is a modifier then add it to the list of modifiers\n            if (_isModifier(key)) {\n                modifiers.push(key);\n            }\n        }\n\n        // depending on what the key combination is\n        // we will try to pick the best event for it\n        action = _pickBestAction(key, modifiers, action);\n\n        return {\n            key: key,\n            modifiers: modifiers,\n            action: action\n        };\n    }\n\n    function _belongsTo(element, ancestor) {\n        if (element === null || element === document) {\n            return false;\n        }\n\n        if (element === ancestor) {\n            return true;\n        }\n\n        return _belongsTo(element.parentNode, ancestor);\n    }\n\n    function Mousetrap(targetElement) {\n        var self = this;\n\n        targetElement = targetElement || document;\n\n        if (!(self instanceof Mousetrap)) {\n            return new Mousetrap(targetElement);\n        }\n\n        /**\n         * element to attach key events to\n         *\n         * @type {Element}\n         */\n        self.target = targetElement;\n\n        /**\n         * a list of all the callbacks setup via Mousetrap.bind()\n         *\n         * @type {Object}\n         */\n        self._callbacks = {};\n\n        /**\n         * direct map of string combinations to callbacks used for trigger()\n         *\n         * @type {Object}\n         */\n        self._directMap = {};\n\n        /**\n         * keeps track of what level each sequence is at since multiple\n         * sequences can start out with the same sequence\n         *\n         * @type {Object}\n         */\n        var _sequenceLevels = {};\n\n        /**\n         * variable to store the setTimeout call\n         *\n         * @type {null|number}\n         */\n        var _resetTimer;\n\n        /**\n         * temporary state where we will ignore the next keyup\n         *\n         * @type {boolean|string}\n         */\n        var _ignoreNextKeyup = false;\n\n        /**\n         * temporary state where we will ignore the next keypress\n         *\n         * @type {boolean}\n         */\n        var _ignoreNextKeypress = false;\n\n        /**\n         * are we currently inside of a sequence?\n         * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\n         *\n         * @type {boolean|string}\n         */\n        var _nextExpectedAction = false;\n\n        /**\n         * resets all sequence counters except for the ones passed in\n         *\n         * @param {Object} doNotReset\n         * @returns void\n         */\n        function _resetSequences(doNotReset) {\n            doNotReset = doNotReset || {};\n\n            var activeSequences = false,\n                key;\n\n            for (key in _sequenceLevels) {\n                if (doNotReset[key]) {\n                    activeSequences = true;\n                    continue;\n                }\n                _sequenceLevels[key] = 0;\n            }\n\n            if (!activeSequences) {\n                _nextExpectedAction = false;\n            }\n        }\n\n        /**\n         * finds all callbacks that match based on the keycode, modifiers,\n         * and action\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event|Object} e\n         * @param {string=} sequenceName - name of the sequence we are looking for\n         * @param {string=} combination\n         * @param {number=} level\n         * @returns {Array}\n         */\n        function _getMatches(character, modifiers, e, sequenceName, combination, level) {\n            var i;\n            var callback;\n            var matches = [];\n            var action = e.type;\n\n            // if there are no events related to this keycode\n            if (!self._callbacks[character]) {\n                return [];\n            }\n\n            // if a modifier key is coming up on its own we should allow it\n            if (action == 'keyup' && _isModifier(character)) {\n                modifiers = [character];\n            }\n\n            // loop through all callbacks for the key that was pressed\n            // and see if any of them match\n            for (i = 0; i < self._callbacks[character].length; ++i) {\n                callback = self._callbacks[character][i];\n\n                // if a sequence name is not specified, but this is a sequence at\n                // the wrong level then move onto the next match\n                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {\n                    continue;\n                }\n\n                // if the action we are looking for doesn't match the action we got\n                // then we should keep going\n                if (action != callback.action) {\n                    continue;\n                }\n\n                // if this is a keypress event and the meta key and control key\n                // are not pressed that means that we need to only look at the\n                // character, otherwise check the modifiers as well\n                //\n                // chrome will not fire a keypress if meta or control is down\n                // safari will fire a keypress if meta or meta+shift is down\n                // firefox will fire a keypress if meta or control is down\n                if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {\n\n                    // when you bind a combination or sequence a second time it\n                    // should overwrite the first one.  if a sequenceName or\n                    // combination is specified in this call it does just that\n                    //\n                    // @todo make deleting its own method?\n                    var deleteCombo = !sequenceName && callback.combo == combination;\n                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;\n                    if (deleteCombo || deleteSequence) {\n                        self._callbacks[character].splice(i, 1);\n                    }\n\n                    matches.push(callback);\n                }\n            }\n\n            return matches;\n        }\n\n        /**\n         * actually calls the callback function\n         *\n         * if your callback function returns false this will use the jquery\n         * convention - prevent default and stop propogation on the event\n         *\n         * @param {Function} callback\n         * @param {Event} e\n         * @returns void\n         */\n        function _fireCallback(callback, e, combo, sequence) {\n\n            // if this event should not happen stop here\n            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {\n                return;\n            }\n\n            if (callback(e, combo) === false) {\n                _preventDefault(e);\n                _stopPropagation(e);\n            }\n        }\n\n        /**\n         * handles a character key event\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event} e\n         * @returns void\n         */\n        self._handleKey = function(character, modifiers, e) {\n            var callbacks = _getMatches(character, modifiers, e);\n            var i;\n            var doNotReset = {};\n            var maxLevel = 0;\n            var processedSequenceCallback = false;\n\n            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence\n            for (i = 0; i < callbacks.length; ++i) {\n                if (callbacks[i].seq) {\n                    maxLevel = Math.max(maxLevel, callbacks[i].level);\n                }\n            }\n\n            // loop through matching callbacks for this key event\n            for (i = 0; i < callbacks.length; ++i) {\n\n                // fire for all sequence callbacks\n                // this is because if for example you have multiple sequences\n                // bound such as \"g i\" and \"g t\" they both need to fire the\n                // callback for matching g cause otherwise you can only ever\n                // match the first one\n                if (callbacks[i].seq) {\n\n                    // only fire callbacks for the maxLevel to prevent\n                    // subsequences from also firing\n                    //\n                    // for example 'a option b' should not cause 'option b' to fire\n                    // even though 'option b' is part of the other sequence\n                    //\n                    // any sequences that do not match here will be discarded\n                    // below by the _resetSequences call\n                    if (callbacks[i].level != maxLevel) {\n                        continue;\n                    }\n\n                    processedSequenceCallback = true;\n\n                    // keep a list of which sequences were matches for later\n                    doNotReset[callbacks[i].seq] = 1;\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);\n                    continue;\n                }\n\n                // if there were no sequence matches but we are still here\n                // that means this is a regular match so we should fire that\n                if (!processedSequenceCallback) {\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo);\n                }\n            }\n\n            // if the key you pressed matches the type of sequence without\n            // being a modifier (ie \"keyup\" or \"keypress\") then we should\n            // reset all sequences that were not matched by this event\n            //\n            // this is so, for example, if you have the sequence \"h a t\" and you\n            // type \"h e a r t\" it does not match.  in this case the \"e\" will\n            // cause the sequence to reset\n            //\n            // modifier keys are ignored because you can have a sequence\n            // that contains modifiers such as \"enter ctrl+space\" and in most\n            // cases the modifier key will be pressed before the next key\n            //\n            // also if you have a sequence such as \"ctrl+b a\" then pressing the\n            // \"b\" key will trigger a \"keypress\" and a \"keydown\"\n            //\n            // the \"keydown\" is expected when there is a modifier, but the\n            // \"keypress\" ends up matching the _nextExpectedAction since it occurs\n            // after and that causes the sequence to reset\n            //\n            // we ignore keypresses in a sequence that directly follow a keydown\n            // for the same character\n            var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;\n            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {\n                _resetSequences(doNotReset);\n            }\n\n            _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';\n        };\n\n        /**\n         * handles a keydown event\n         *\n         * @param {Event} e\n         * @returns void\n         */\n        function _handleKeyEvent(e) {\n\n            // normalize e.which for key events\n            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\n            if (typeof e.which !== 'number') {\n                e.which = e.keyCode;\n            }\n\n            var character = _characterFromEvent(e);\n\n            // no character found then stop\n            if (!character) {\n                return;\n            }\n\n            // need to use === for the character check because the character can be 0\n            if (e.type == 'keyup' && _ignoreNextKeyup === character) {\n                _ignoreNextKeyup = false;\n                return;\n            }\n\n            self.handleKey(character, _eventModifiers(e), e);\n        }\n\n        /**\n         * called to set a 1 second timeout on the specified sequence\n         *\n         * this is so after each key press in the sequence you have 1 second\n         * to press the next key before you have to start over\n         *\n         * @returns void\n         */\n        function _resetSequenceTimer() {\n            clearTimeout(_resetTimer);\n            _resetTimer = setTimeout(_resetSequences, 1000);\n        }\n\n        /**\n         * binds a key sequence to an event\n         *\n         * @param {string} combo - combo specified in bind call\n         * @param {Array} keys\n         * @param {Function} callback\n         * @param {string=} action\n         * @returns void\n         */\n        function _bindSequence(combo, keys, callback, action) {\n\n            // start off by adding a sequence level record for this combination\n            // and setting the level to 0\n            _sequenceLevels[combo] = 0;\n\n            /**\n             * callback to increase the sequence level for this sequence and reset\n             * all other sequences that were active\n             *\n             * @param {string} nextAction\n             * @returns {Function}\n             */\n            function _increaseSequence(nextAction) {\n                return function() {\n                    _nextExpectedAction = nextAction;\n                    ++_sequenceLevels[combo];\n                    _resetSequenceTimer();\n                };\n            }\n\n            /**\n             * wraps the specified callback inside of another function in order\n             * to reset all sequence counters as soon as this sequence is done\n             *\n             * @param {Event} e\n             * @returns void\n             */\n            function _callbackAndReset(e) {\n                _fireCallback(callback, e, combo);\n\n                // we should ignore the next key up if the action is key down\n                // or keypress.  this is so if you finish a sequence and\n                // release the key the final key will not trigger a keyup\n                if (action !== 'keyup') {\n                    _ignoreNextKeyup = _characterFromEvent(e);\n                }\n\n                // weird race condition if a sequence ends with the key\n                // another sequence begins with\n                setTimeout(_resetSequences, 10);\n            }\n\n            // loop through keys one at a time and bind the appropriate callback\n            // function.  for any key leading up to the final one it should\n            // increase the sequence. after the final, it should reset all sequences\n            //\n            // if an action is specified in the original bind call then that will\n            // be used throughout.  otherwise we will pass the action that the\n            // next key in the sequence should match.  this allows a sequence\n            // to mix and match keypress and keydown events depending on which\n            // ones are better suited to the key provided\n            for (var i = 0; i < keys.length; ++i) {\n                var isFinal = i + 1 === keys.length;\n                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);\n                _bindSingle(keys[i], wrappedCallback, action, combo, i);\n            }\n        }\n\n        /**\n         * binds a single keyboard combination\n         *\n         * @param {string} combination\n         * @param {Function} callback\n         * @param {string=} action\n         * @param {string=} sequenceName - name of sequence if part of sequence\n         * @param {number=} level - what part of the sequence the command is\n         * @returns void\n         */\n        function _bindSingle(combination, callback, action, sequenceName, level) {\n\n            // store a direct mapped reference for use with Mousetrap.trigger\n            self._directMap[combination + ':' + action] = callback;\n\n            // make sure multiple spaces in a row become a single space\n            combination = combination.replace(/\\s+/g, ' ');\n\n            var sequence = combination.split(' ');\n            var info;\n\n            // if this pattern is a sequence of keys then run through this method\n            // to reprocess each pattern one key at a time\n            if (sequence.length > 1) {\n                _bindSequence(combination, sequence, callback, action);\n                return;\n            }\n\n            info = _getKeyInfo(combination, action);\n\n            // make sure to initialize array if this is the first time\n            // a callback is added for this key\n            self._callbacks[info.key] = self._callbacks[info.key] || [];\n\n            // remove an existing match if there is one\n            _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);\n\n            // add this call back to the array\n            // if it is a sequence put it at the beginning\n            // if not put it at the end\n            //\n            // this is important because the way these are processed expects\n            // the sequence ones to come first\n            self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({\n                callback: callback,\n                modifiers: info.modifiers,\n                action: info.action,\n                seq: sequenceName,\n                level: level,\n                combo: combination\n            });\n        }\n\n        /**\n         * binds multiple combinations to the same callback\n         *\n         * @param {Array} combinations\n         * @param {Function} callback\n         * @param {string|undefined} action\n         * @returns void\n         */\n        self._bindMultiple = function(combinations, callback, action) {\n            for (var i = 0; i < combinations.length; ++i) {\n                _bindSingle(combinations[i], callback, action);\n            }\n        };\n\n        // start!\n        _addEvent(targetElement, 'keypress', _handleKeyEvent);\n        _addEvent(targetElement, 'keydown', _handleKeyEvent);\n        _addEvent(targetElement, 'keyup', _handleKeyEvent);\n    }\n\n    /**\n     * binds an event to mousetrap\n     *\n     * can be a single key, a combination of keys separated with +,\n     * an array of keys, or a sequence of keys separated by spaces\n     *\n     * be sure to list the modifier keys first to make sure that the\n     * correct key ends up getting bound (the last key in the pattern)\n     *\n     * @param {string|Array} keys\n     * @param {Function} callback\n     * @param {string=} action - 'keypress', 'keydown', or 'keyup'\n     * @returns void\n     */\n    Mousetrap.prototype.bind = function(keys, callback, action) {\n        var self = this;\n        keys = keys instanceof Array ? keys : [keys];\n        self._bindMultiple.call(self, keys, callback, action);\n        return self;\n    };\n\n    /**\n     * unbinds an event to mousetrap\n     *\n     * the unbinding sets the callback function of the specified key combo\n     * to an empty function and deletes the corresponding key in the\n     * _directMap dict.\n     *\n     * TODO: actually remove this from the _callbacks dictionary instead\n     * of binding an empty function\n     *\n     * the keycombo+action has to be exactly the same as\n     * it was defined in the bind method\n     *\n     * @param {string|Array} keys\n     * @param {string} action\n     * @returns void\n     */\n    Mousetrap.prototype.unbind = function(keys, action) {\n        var self = this;\n        return self.bind.call(self, keys, function() {}, action);\n    };\n\n    /**\n     * triggers an event that has already been bound\n     *\n     * @param {string} keys\n     * @param {string=} action\n     * @returns void\n     */\n    Mousetrap.prototype.trigger = function(keys, action) {\n        var self = this;\n        if (self._directMap[keys + ':' + action]) {\n            self._directMap[keys + ':' + action]({}, keys);\n        }\n        return self;\n    };\n\n    /**\n     * resets the library back to its initial state.  this is useful\n     * if you want to clear out the current keyboard shortcuts and bind\n     * new ones - for example if you switch to another page\n     *\n     * @returns void\n     */\n    Mousetrap.prototype.reset = function() {\n        var self = this;\n        self._callbacks = {};\n        self._directMap = {};\n        return self;\n    };\n\n    /**\n     * should we stop this event before firing off callbacks\n     *\n     * @param {Event} e\n     * @param {Element} element\n     * @return {boolean}\n     */\n    Mousetrap.prototype.stopCallback = function(e, element) {\n        var self = this;\n\n        // if the element has the class \"mousetrap\" then no need to stop\n        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n            return false;\n        }\n\n        if (_belongsTo(element, self.target)) {\n            return false;\n        }\n\n        // Events originating from a shadow DOM are re-targetted and `e.target` is the shadow host,\n        // not the initial event target in the shadow tree. Note that not all events cross the\n        // shadow boundary.\n        // For shadow trees with `mode: 'open'`, the initial event target is the first element in\n        // the event’s composed path. For shadow trees with `mode: 'closed'`, the initial event\n        // target cannot be obtained.\n        if ('composedPath' in e && typeof e.composedPath === 'function') {\n            // For open shadow trees, update `element` so that the following check works.\n            var initialEventTarget = e.composedPath()[0];\n            if (initialEventTarget !== e.target) {\n                element = initialEventTarget;\n            }\n        }\n\n        // stop for input, select, and textarea\n        return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;\n    };\n\n    /**\n     * exposes _handleKey publicly so it can be overwritten by extensions\n     */\n    Mousetrap.prototype.handleKey = function() {\n        var self = this;\n        return self._handleKey.apply(self, arguments);\n    };\n\n    /**\n     * allow custom key mappings\n     */\n    Mousetrap.addKeycodes = function(object) {\n        for (var key in object) {\n            if (object.hasOwnProperty(key)) {\n                _MAP[key] = object[key];\n            }\n        }\n        _REVERSE_MAP = null;\n    };\n\n    /**\n     * Init the global mousetrap functions\n     *\n     * This method is needed to allow the global mousetrap functions to work\n     * now that mousetrap is a constructor function.\n     */\n    Mousetrap.init = function() {\n        var documentMousetrap = Mousetrap(document);\n        for (var method in documentMousetrap) {\n            if (method.charAt(0) !== '_') {\n                Mousetrap[method] = (function(method) {\n                    return function() {\n                        return documentMousetrap[method].apply(documentMousetrap, arguments);\n                    };\n                } (method));\n            }\n        }\n    };\n\n    Mousetrap.init();\n\n    // expose mousetrap to the global object\n    window.Mousetrap = Mousetrap;\n\n    // expose as a common js module\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = Mousetrap;\n    }\n\n    // expose mousetrap as an AMD module\n    if (typeof define === 'function' && define.amd) {\n        define(function() {\n            return Mousetrap;\n        });\n    }\n}) (typeof window !== 'undefined' ? window : null, typeof  window !== 'undefined' ? document : null);\n"],"sourceRoot":""}